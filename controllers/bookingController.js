const Booking = require('../models/Booking');
const User = require('../models/User');
const Ticket = require('../models/Ticket');
const mongoose = require('mongoose');

const createBooking = async (req, res) => {
  const {bookingId, movieID, movieTitle, seats, address, foods, total_price, date, time, booking_time, order_status, poster_path } = req.body;
  const userObjectId = req.user._id;

  try {
    // üî• T√¨m User ƒë·ªÉ l·∫•y s·ªë ƒëi·ªán tho·∫°i
    const user = await User.findById(userObjectId);
    if (!user) {
      return res.status(404).json({ message: 'User kh√¥ng t·ªìn t·∫°i' });
    }

    const newBooking = new Booking({
      bookingId,
      userId: user.phone,
      movieID,
      movieTitle,
      seats,
      address,
      foods,
      total_price,
      date,
      time,
      booking_time,
      order_status,
      poster_path,
    });

    await newBooking.save();

    console.log('Booking th√†nh c√¥ng:', newBooking); // log ra booking data

    return res.status(201).json({ message: "ƒê·∫∑t v√© th√†nh c√¥ng", booking: newBooking });
  } catch (err) {
    console.error('L·ªói t·∫°o booking:', err);
    return res.status(500).json({ message: "L·ªói server" });
  }
};

const getAllBookingsByUserId = async(req, res) =>{
  const userId = req.user.params;

  try{
    const bookings = await Booking.find({ userId: userId });
    if(bookings.length === 0){
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y booking n√†o" });
    }
    return res.status(200).json({ bookings });
  }catch(err){
    console.error('L·ªói l·∫•y danh s√°ch booking:', err);
    return res.status(500).json({ message: "L·ªói server" });
  }
}

const getAllBookingsByMovieId = async(req, res) =>{
  const movieId = req.user.params;

  try{
    const bookings = await Booking.find({ movieID: movieId });
    if(bookings.length === 0){
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y booking n√†o" });
    }
    return res.status(200).json({ bookings });
  }catch(err){
    console.error('L·ªói l·∫•y danh s√°ch booking:', err);
    return res.status(500).json({ message: "L·ªói server" });
  }
}

const cancelBooking = async (req, res) => {
  const { bookingId } = req.params;
  const userId = req.user?.phone; // Gi·∫£ s·ª≠ b·∫°n c√≥ middleware x√°c th·ª±c ƒë·ªÉ l·∫•y phone

  const session = await mongoose.startSession();
  session.startTransaction();

  try {
    // T√¨m booking
    const booking = await Booking.findOne({ bookingId }).session(session);
    if (!booking) {
      await session.abortTransaction();
      session.endSession();
      return res.status(404).json({ message: 'Booking kh√¥ng t·ªìn t·∫°i' });
    }

    // Ki·ªÉm tra xem booking c√≥ thu·ªôc v·ªÅ ng∆∞·ªùi d√πng kh√¥ng
    if (booking.userId !== userId) {
      await session.abortTransaction();
      session.endSession();
      return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn h·ªßy booking n√†y' });
    }

    // Ki·ªÉm tra tr·∫°ng th√°i booking
    if (booking.order_status === 'canceled') {
      await session.abortTransaction();
      session.endSession();
      return res.status(400).json({ message: 'Booking ƒë√£ ƒë∆∞·ª£c h·ªßy tr∆∞·ªõc ƒë√≥' });
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i booking
    booking.order_status = 'canceled';
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i gh·∫ø trong booking.seats
    booking.seats = booking.seats.map((seat) => ({
      ...seat,
      status: 'available',
    }));
    await booking.save({ session });

    // H·ªßy t·∫•t c·∫£ ticket li√™n quan
    const ticketUpdateResult = await Ticket.updateMany(
      { booking_id: bookingId },
      { status: 'canceled' },
      { session }
    );

    // Commit transaction
    await session.commitTransaction();
    session.endSession();

    return res.status(200).json({
      message: 'ƒê√£ h·ªßy booking v√† t·∫•t c·∫£ v√© li√™n quan',
      booking,
      ticketsCanceled: ticketUpdateResult.modifiedCount,
    });
  } catch (err) {
    await session.abortTransaction();
    session.endSession();
    console.error('L·ªói h·ªßy booking:', err);
    return res.status(500).json({ message: 'L·ªói server' });
  }
};

const getBookingSeats = async (req, res) => {
  try {
    const {movieID, date, time, address} = req.query;
    if (!movieID || !date || !time || !address) {
      return res.status(400).json({ message: 'Thi·∫øu th√¥ng tin' });
    }
    const bookings = await Booking.find({ 
      movieID: Number(movieID), 
      date, 
      time, 
      address,
      order_status: "ordered",
    });

    const bookingSeats = bookings.flatMap(booking => booking.seats);

    res.status(200).json({ bookingSeats });
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch gh·∫ø:", error);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß n·ªôi b·ªô." });
  }
}


module.exports = { createBooking, getAllBookingsByUserId, cancelBooking, getAllBookingsByMovieId, getBookingSeats };
